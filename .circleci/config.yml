version: 2.1

resource_job_defaults: &resource_job_defaults
  docker:
    - image: 'cimg/base:current'
  steps:
    - run:
        name: verify required Environment Variables
        command: |
          if [ -z "${CIRCLE_HOSTNAME}" -o -z "${CIRCLE_TOKEN}" ];then
            echo "You must provide 2 Environment Variables in project settings for this job to run."
            echo "CIRCLE_HOSTNAME: Should be the scheme://domain of your install. \"https://ci.example.com\""
            echo "CIRCLE_TOKEN: Should be the API Key of an admin or project level with Scope:All"
            exit 1
          fi
    - run:
        name: verify that job ran with the requested resource_class option
        command: |
          curl -k \
          "${CIRCLE_HOSTNAME%/}/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM?\
          circle-token=$CIRCLE_TOKEN" | \
          jq '.picard.resource_class.class' | grep $CIRCLE_JOB

basic_docker_build: &basic_docker_build
  name: "Build a really basic docker image"
  command: |
    dockerfile=Dockerfile
    echo "FROM alpine:latest" > $dockerfile
    echo "RUN echo hello" >> $dockerfile
    docker build -f $dockerfile --tag throwaway:$CIRCLE_BUILD_NUM .
    docker run --rm throwaway:$CIRCLE_BUILD_NUM

contexts_defaults: &contexts_defaults
  docker: [{image: 'alpine:latest'}]
  working_directory: /a/contexts/test
  resource_class: small

workspaces_defaults: &workspaces_defaults
  docker: [{image: 'circleci/node:latest'}]
  working_directory: ~/foo/bar
  resource_class: small

jobs:
  # resource class jobs
  small: # 1 vCPU, 2GB RAM
    <<: *resource_job_defaults
    resource_class: small

  medium: # 2 vCPUs, 4GB RAM
    <<: *resource_job_defaults
    resource_class: medium

  #medium_plus: # 3 vCPUs, 6GB RAM
    #<<: *resource_job_defaults
    #resource_class: medium+

  large: # 4 vCPUs, 8GB RAM
    <<: *resource_job_defaults
    resource_class: large

  random-resource-test:
    docker:
      - image: cimg/base:current
    steps:
      - run: |
          curl -k \
          "${CIRCLE_HOSTNAME%/}/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM?\
          circle-token=$CIRCLE_TOKEN" | \
          jq '.picard.resource_class.class' | grep large

  # vm jobs
  machine_runner:
    machine: true
    resource_class: imlogang-organization-server/machine-runner
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  ubuntu_k8s_machine_runner:
    machine: true
    resource_class: imlogang-organization-server/ubuntu-k8s
    steps:
      - run: echo "I am on Machine Runner 3.0!"

  container_runner:
    docker:
      - image: cimg/base:current
    resource_class: imlogang-organization-server/container-runner-server
    steps: 
      - run: echo "I'm running on Container Runner on CircleCI Server!" 

  docker-runner-mr3:
    machine: true
    resource_class: imlogang-organization-server/docker-mr3
    steps:
      - run: echo "This is on Docker with Machine Runner 3.0!!!"

  docker-runner-la:
    machine: true
    resource_class: imlogang-organization-server/docker-runner
    steps:
      - run: echo "This is on Docker with Launch Agent!!!"
      
  # feature jobs
  contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep CONTEXT_END_TO_END_TEST_VAR

  multi-contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep MULTI_CONTEXT_END_TO_END_VAR

  write_workspace:
    <<: *workspaces_defaults
    steps:
      - run: mkdir stuff
      - run: echo 5 >./stuff/thing
      - persist_to_workspace:
          root: .
          paths:
            - stuff

  read_workspace:
    <<: *workspaces_defaults
    steps:
      - attach_workspace:
           at: ./attached
      - run: |
          if [[ $(< ./attached/stuff/thing) != '5' ]]; then
            echo 'Sadness, the value is not what we expected, so the workspace write/read did not work'
            exit 1
          else
            echo 'Yay, value matches'
            exit 0
          fi

  save_and_restore_cache:
    docker:
      - image: circleci/python
    working_directory: ~/realitycheck
    resource_class: small
    steps:
      - checkout
      - run: mkdir -p stuff
      - run: echo "asdfghgjh" >./stuff/thing
      - save_cache:
          key: v4-file-cache-{{ .BuildNum }}
          paths:
            - ./stuff/thing
      - run: rm -rf ./stuff/thing
      - run: sleep 5
      - restore_cache:
            keys:
              - v4-file-cache-{{ .BuildNum }}
      - run: |
            if [[ $(< stuff/thing) != 'asdfghgjh' ]]; then
              exit 1
            else
              echo "The cache was populated"
            fi

  artifacts_test_results:
    docker:
      - image: python:3.6.0
    working_directory: ~/realitycheck
    resource_class: small
    steps:
      - checkout
      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1.txt;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2.txt;
      - store_artifacts:
          path: /tmp/artifact-1.txt
          destination: artifact-file.txt
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  resource_class_jobs:
    jobs:
      - small
      - medium
      #- medium_plus
      - large
      - random-resource-test

  runner_jobs:
    jobs:
      - machine_runner
      - container_runner
      - ubuntu_k8s_machine_runner
      - docker-runner-la
      - docker-runner-mr3

  feature_jobs:
    jobs:
      - save_and_restore_cache
      - contexts:
          context: org-global
      - multi-contexts:
          context: individual-local
      - write_workspace
      - read_workspace:
          requires:
            - write_workspace
      - artifacts_test_results
